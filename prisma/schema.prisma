// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique @db.VarChar(20)
  slug    String    @db.Text
  Product Product[]

  @@map("categories")
}

model User {
  id                String    @id @default(uuid())
  fullName          String    @db.VarChar(50)
  email             String    @unique @db.VarChar(70)
  password          String    @db.VarChar(120)
  cpf               String    @unique @db.VarChar(11)
  phone             String    @unique @db.VarChar(11)
  birthday          String
  type              Type      @default(client)
  resetToken        String?
  isEmailVerified   Boolean   @default(false)
  confirmationToken String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?
  address           Address[]
  cart              Cart?
  orders            Order[]
  reviews           Reviews[]

  @@map("users")
}

enum Type {
  admin
  client
}

model Image {
  id           String  @id @default(uuid())
  title        String  @db.Text
  isCover      Boolean @default(false)
  path         String  @db.Text
  cloudinaryId String  @unique @db.VarChar(16)
  Product      Product @relation(fields: [productId], references: [id])
  productId    String

  @@map("images")
}

model Address {
  id          String      @id @default(uuid())
  responsible String      @db.VarChar(90)
  district    String      @db.VarChar(50)
  zipCode     String      @db.Char(8)
  street      String      @db.VarChar(50)
  city        String      @db.VarChar(50)
  state       String      @db.Char(2)
  number      String      @default("s/n") @db.VarChar(5)
  complement  String?     @db.VarChar(20)
  reference   String?     @db.VarChar(30)
  isDefault   Boolean     @default(false)
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  shipments   Shipments[]

  @@map("addresses")
}

enum Role {
  standard
  fast
}

model Shipments {
  id             String    @id @default(uuid())
  fee            Float     @db.DoublePrecision
  trackCode      String?   @db.Text
  shippedAt      DateTime?
  deliveredUntil DateTime
  option         Role      @default(standard)
  address        Address   @relation(fields: [addressId], references: [id])
  addressId      String
  order          Order?

  @@map("shipments")
}

model Product {
  id             String      @id @default(uuid())
  name           String      @unique @db.VarChar(120)
  slug           String      @db.Text
  price          Float       @db.DoublePrecision
  description    String      @db.Text
  color          String      @db.VarChar(50)
  sku            String      @unique @db.VarChar(11)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  deletedAt      DateTime?
  specifications Json        @db.JsonB()
  category       Category    @relation(fields: [categoryId], references: [id])
  categoryId     String
  images         Image[]
  stock          Stock?
  cartItems      CartItem[]
  orderItems     OrderItem[]
  reviews        Reviews[]

  @@map("products")
}

model Stock {
  id        String  @id @default(uuid())
  quantity  Int
  minimum   Int     @default(1)
  product   Product @relation(fields: [productId], references: [id])
  productId String  @unique

  @@map("stock")
}

model Cart {
  id         String @id @default(uuid())
  customer   User   @relation(fields: [customerId], references: [id])
  customerId String @unique
  total      Float  @default(0) @db.DoublePrecision

  cartItems CartItem[]

  @@map("carts")
}

model CartItem {
  id        String  @id @default(uuid())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  price     Float   @db.DoublePrecision
  quantity  Int
  subTotal  Float   @db.DoublePrecision

  @@map("cartItems")
}

enum StatusOrder {
  confirmed
  preparing
  shipped
  canceled
}

model Order {
  id         String      @id @default(uuid())
  status     StatusOrder @default(confirmed)
  orderedAt  DateTime    @default(now())
  customer   User        @relation(fields: [customerId], references: [id])
  customerId String      @unique
  deliverTo  Shipments   @relation(fields: [deliveryId], references: [id])
  deliveryId String      @unique
  total      Float       @default(0) @db.DoublePrecision

  orderItems OrderItem[]
  payment    Payment?

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  price     Float   @db.DoublePrecision
  quantity  Int
  subTotal  Float   @db.DoublePrecision

  @@map("orderItems")
}

enum StatusPayment {
  pending
  approved
  rejected
}

model Payment {
  id        String        @id @default(uuid())
  status    StatusPayment @default(pending)
  createdAt DateTime      @default(now())
  paidAt    DateTime?
  order     Order         @relation(fields: [orderId], references: [id])
  orderId   String        @unique

  @@map("payments")
}

model Reviews {
  id          String   @id @default(uuid())
  rating      Int
  title       String   @db.VarChar(20)
  description String
  likes       Int      @default(0)
  createdAt   DateTime @default(now())
  status      Status   @default(analyzing)
  user        User     @relation(fields: [userId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
  userId      String
  productId   String
}

enum Status {
  analyzing
  approved
  rejected
}
